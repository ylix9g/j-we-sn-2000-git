Git - отдельная консольная программа выполняющая функции системы контроля
версий, такие системы позволяют хранить историю изменений основанную на точках
сохранений (commit), предоставляют команды для навигации по этой истории и
сравнения различных точек сохранения, позволяют работать с проектом параллельно
в нескольких разных состояниях (ветки) и объединять эти состояния по мере
необходимости. Git репозиторием называется папка относительно которой будет
храниться история и отслеживаться изменения, внутри этой папки будет создана
новая папка с названием `.git`, непосредственно в ней и будет храниться вся
история, если её удалить то история безвозвратно пропадёт.

`git init` - выполнение данной команды создаёт новый репозиторий относительно
каталога в котором она выполняется.

`git status` - выводит информацию об актуальном состоянии репозитории такой как
название текущей ветки, файлы по которым отслеживаются изменения, режим работы
репозитория на момент выполнения команды и так далее.

`git add <files>` - добавляет файлы для дальнейшего сохранения в истории
изменений, при выполнении сохранения (commit) файл будет записан в состоянии в
котором он находился на момент выполнения команды git add.

`git config user.name/git config user.email` - данный команды позволяют задать
конструкционные параметры user.name и user.email хранящие в себе имя и email
разработчика вносящего изменения в историю.

`git commit -m <message>` - формирует новую точку сохранения с изменениями
файлов добавленных ранее через git add. При выполнении команды обязательным
является небольшое пояснительное сообщение для создаваемой точки сохранения.

При разработки проекта на любом языке программирования зачастую в папке проекта
хранятся файлы наличие которых в репозитории будет избыточным, к таким файлам
относится вся локальная конфигурация проекта, результаты компиляции и так
далее. Избежать наличия лишних файлов в репозитории можно через добавления их
названий в специальный файл `.gitignore`.

Ветками в репозитории называются его параллельно существующие состояния, каждая
ветка имеет свою точку сохранения (commit) от которой она была создана, данная
точка сохранения будет считаться отправной для ветки. Каждая ветка имеет общую
историю с другами (так как они осздаются на основе друг друга), но с момента
создания новой ветки их история может отличаться.

`git branch -v` - выводит список всех веток существующих в репозитории на
момент выполнения команды.

`git branch <name>` - создаёт новую ветку и в качестве её отправной точки
сохранения возьмёт последнюю точку сохранения актуальной ветки (ветка на
которой репозиторий находится) в момент выполнения команды.

`git checkout <name>` - переключает репозиторий на указанную ветку.

Рано или поздно встаёт воспрос переноса изменений из одной ветки в другую,
такая операция называется слиянием (merge), данный процесс может протекать
автоматически и без конфликтов либо может требовать вмешательства разработчика
в зависимости от состояния сливаемых веток.

Процесс слияния может протекать по одному из трёх возможных сценариев:
1) Fast-forward - ситуация при которой сливаемая ветка имеет общую историю с
целевой веткой (в которую переносятся изменения) при условии что целевая ветка
не ушла вперёд (не появились новые точки сохранения). При типе слияния
fast-forward новые изменения из сливаемой ветки будут перенесены в целевую без
конфликтов.
2) Автоматическое слияние (auto merge) - ситуация при которой в сливаемой и
целевой ветке были созданы точки сохранения (когда обе ветки ушли вперёд по
истории), но в этих точках сохранения не было изменений одного и тогоже файла.
3) Ручное слияние (manual merge) - ситуация при которой в сливаемой и целей
ветке были созданы точки сохранения (когда обе ветки ушли вперёд по устории),
но в этих точках сохранений были затронуты одинаковые файлы (такая ситуация
называется конфликтом и требует прямого вмешательства разработчика).

`git merge <name>` - запускает процесс слияния указанной ветки с исходной
веткой (целевая, та ветка на которой репозиторий находится в момент выполнения
команды).

Локальный репозиторий - git init -> .git.

Удалённый репозиторий - github, gitlab, bitbucket и т.д.

`git remote -v` - выводит список адресов удалённых репозиториев которые были
сохранены в локальном.

`git remote add <name> <url>` - добавляет новый адрес удалённого репозитория
под указанным наименованием (зачастую origin).

`git push -u <remote> <branch>` - загружает изменения указанной ветки
локального репозитория на удалённый репозиторий расположенный на адресе под
названием remote.

`git clone <url> .` - скачивает удалённый репозиторий по указанному адресу в
папку из которой команда выполняется.











